一 Graphics View Framework
	Graphics View Framework概述
		1,一句话概括 
									【scene】 																			【item】 
			Graphics View provides a surface for managing and interacting with a large number of custom-made 2D graphical items, 
				and a view widget for visualizing the items, with support for zooming and rotation.
						【view】
				
			Several views can observe a single scene, and the scene contains items of varying geometric shapes.
			
			
			When rendering, Graphics View's scene coordinates correspond to QPainter's logical coordinates, 
				nd view coordinates are the same as device coordinates.
			// scene coord 对应 QPainter logical coord 
			// view  coord 对应 physical coord(device coord)
		
		2,item coord 
			Items live in their own local coordinate system.
			Their coordinates are usually centered around its center point (0, 0), and this is also the center 【for all transformations】.
			当创建自定义item时，只需要关心item coord，scene 和 view 可以执行变换

			items' position and transformation are relative to the parent. 
			child items' coordinates are unaffected by the parent's transformation.
			relative to the scene, however, the child will follow the parent's transformation and position. 
			对于item来说，绝大多数的功能函数都不管parent如何transform只是作用于item coord，其中QGraphicsItem::pos()是个特例，它返回item在parent中的位置。
			
		3,scene coord 
			The scene represents the base coordinate system for all its items.
			The scene coordinate system describes the position of each top-level item.
			scene coord原点默认在view的中心
			item coord 一开始和parent item的坐标系一致,如果父是scene，则和scene一致
			
						
		4,view coord 
			View coordinates are the coordinates of the widget. Each unit in view coordinates corresponds to one pixel.
			The top left corner of QGraphicsView's viewport is always (0, 0), and the bottom right corner is always (viewport width, viewport height).
			All mouse events and drag and drop events are originally received as view coordinates, and you need to map these coordinates to the scene in order to interact with items.
			
		5,coord mapping
			For example, when you click your mouse in QGraphicsView's viewport, you can ask the scene what item is under the cursor by calling 【QGraphicsView::mapToScene()】, followed by 【QGraphicsScene::itemAt()】. 	
			
			If you want to know where in the viewport an item is located, you can call 【QGraphicsItem::mapToScene()】 on the item, then 【QGraphicsView::mapFromScene()】 on the view. 

			If you want to find what items are inside a view ellipse,you can pass a QPainterPath to【QGraphicsView::mapToScene()】, and then pass the mapped path to【QGraphicsScene::items()】.
			
			view 中提供了 mapFromScene 和 mapToScene 
			scene 中 无map函数
			item 中提供了 mapFromScene 和 mapToScene
		
		6,key features
			6.1 zooming and rotating 
				QGraphicsView supports the same affine transformations as QPainter does through QGraphicsView::setMatrix().
				By applying a transformation to the view, you can easily add support for common navigation features such as zooming and rotating.
			
			6.2 print 打印 
				
			6.3 drag and drop 
				view 
					dragEnterEvent(QDragEnterEvent *)
					dragLeaveEvent(QDragLeaveEvent *)
					dragMoveEvent(QDragMoveEvent *)
					dropEvent(QDropEvent*)
					mousePressEvent(QMouseEvent * ) 
					mouseMoveEvent(QMouseEvent *  )   
					mouseReleaseEvent(QMouseEvent *)
				
				scene 
					dragEnterEvent(QGraphicsSceneDragDropEvent*)
					dragLeaveEvent(QGraphicsSceneDragDropEvent*)
					dragMoveEvent(QGraphicsSceneDragDropEvent*)
					dropEvent (QGraphicsSceneDragDropEvent*)
					mousePressEvent(QGraphicsSceneMouseEvent*)
					mouseMoveEvent(QGraphicsSceneMouseEvent*)
					mouseReleaseEvent(QGraphicsSceneMouseEvent*)
				
				item 
					dragEnterEvent(QGraphicsSceneDragDropEvent *event)
					dragLeaveEvent(QGraphicsSceneDragDropEvent *event)
					dragMoveEvent(QGraphicsSceneDragDropEvent *event)
					dropEvent(QGraphicsSceneDragDropEvent *event)
					mousePressEvent(QGraphicsSceneMouseEvent*)
					mouseMoveEvent(QGraphicsSceneMouseEvent*)
					mouseReleaseEvent(QGraphicsSceneMouseEvent*)
				
				Event继承关系
									
					QEvent->QInputEvent->QMouseEvent 
					
					QEvent->QGraphicsSceneEvent  -> QGraphicsSceneMouseEvent
					
					
												 -> QGraphicsSceneDragDropEvent
												 
												 
					QEvent->QDropEvent->QDragMoveEvent ->	QDragEnterEvent				
					QEvent->QDragLeaveEvent
				
				其他继承关系
					QObject -> QDrag 				
					QObject -> QMimeData 
					QObject -> QAbstractAnimation -> QAnimationGroup -> QParallelAnimationGroup  
												  -> QVariantAnimation ->QPropertyAnimation 
												  
				
				
				
				

				
				Drag and drop is an intuitive way for users to copy or move data around in an application, and is used in many desktop environments as a mechanism for copying data between applications. Drag and drop support in Qt is centered around the QDrag class that handles most of the details of a drag and drop operation.
				The data to be transferred by the drag and drop operation is contained in a QMimeData object. T					
			
				Items can enable drag and drop support by calling QGraphicsItem::setAcceptDrops(). By default, items do not accept drag and drop events.
				To handle the incoming drag, reimplement QGraphicsItem::dragEnterEvent(), QGraphicsItem::dragMoveEvent(), QGraphicsItem::dragLeaveEvent(), and QGraphicsItem::dropEvent().
			
			6.4 item groups 
				
				继承关系
					QtWidgets.QGraphicsItem -> QGraphicsItemGroup 
					
					
				QGraphicsItemGroup类:
					QGraphicsItemGroup is a special type of compound item that treats itself and all its children as one item (i.e., all events and geometries for all children are merged together)
					It's common to use item groups in presentation tools, when the user wants to group several smaller items into one big item in order to simplify moving and copying of items.
						
					There are two ways to construct an item group.
						The easiest and most common approach is to pass a list of items (e.g., all selected items) to QGraphicsScene::createItemGroup(), which returns a new QGraphicsItemGroup item. 	
						The other approach is to manually construct a QGraphicsItemGroup item, add it to the scene calling QGraphicsScene::addItem(), and then add items to the group manually, one at a time by calling addToGroup().
					To dismantle ("ungroup") an item group, you can either call QGraphicsScene::destroyItemGroup(), or you can manually remove all items from the group by calling removeFromGroup().
				
					# important 
					The operation of adding and removing items preserves the items' 【scene-relative】 position and transformation, as opposed to calling setParentItem(), where only the child item's 【parent-relative】 position and transformation are kept.
				
			6.5 widgets and layouts
			
				QGraphicsWidget 类
					继承关系 
						QtWidgets.QGraphicsItem
												-> 	QGraphicsObject 
						QtCore.QObject                                     -> QGraphicsWidget
													QGraphicsLayoutItem 

				
					QGraphicsWidget is an extended base item that provides extra functionality over QGraphicsItem. It is similar to 【QWidget】 in many ways:
						Provides a palette, a font and a style().
						Has a defined geometry().
						Supports layouts with setLayout() and layout().
						Supports shortcuts and actions with grabShortcut() and insertAction()
										
					Unlike QGraphicsItem, QGraphicsWidget is not an abstract class; you can create instances of a QGraphicsWidget without having to subclass it. This approach is useful for widgets that only serve the purpose of organizing child widgets into a layout.				
				
					QGraphicsWidget can be used as a base item for your own custom item if you require advanced input focus handling, e.g., tab focus and activation, or layouts.
					
					Since QGraphicsWidget resembles QWidget and has similar API, it is easier to port a widget from QWidget to QGraphicsWidget, instead of QGraphicsItem.
					
					QWidget-based widgets can be directly embedded into a QGraphicsScene using QGraphicsProxyWidget. 【QGraphicsProxyWidget是QGraphicsWidget的一个子类】
					
					Noticeable differences between QGraphicsWidget and QWidget are:
							QGraphicsWidget																							QWidget
						Coordinates and geometry are defined with qreals (doubles or floats, depending on the platform).	QWidget uses integer geometry (QPoint, QRect).
						The widget is already visible by default; you do not have to call show() to display the widget.		QWidget is hidden by default until you call show().
						A subset of widget attributes are supported.														All widget attributes are supported.
						A top-level item's style defaults to QGraphicsScene::style											A top-level widget's style defaults to QApplication::style
						Graphics View provides a custom drag and drop framework, different from QWidget.					Standard drag and drop framework.
						Widget items do not support modality.																Full modality support.
							
					QGraphicsWidget is similar to QWidget, but unlike QWidget, it doesn't inherit from QPaintDevice; rather from QGraphicsItem instead. 
					This allows you to write complete widgets with events, signals & slots, size hints and policies, and you can also manage your widgets geometries in layouts through QGraphicsLinearLayout and QGraphicsGridLayout.
					
					
				QGraphicsLayout 类
					继承关系 
						QtWidgets.QGraphicsLayoutItem -> QGraphicsLayout  -> QGraphicsLinearLayout
																		  -> QGraphicsGridLayout
			
						QGraphicsLayout is an abstract class that defines a virtual API for arranging QGraphicsWidget children and other QGraphicsLayoutItem objects for a QGraphicsWidget. 
						QGraphicsWidget assigns responsibility to a QGraphicsLayout through QGraphicsWidget::setLayout(). 
						As the widget is resized, the layout will automatically arrange the widget's children. 
						
						QGraphicsLayout is part of a second-generation layout framework designed specifically for QGraphicsWidget. 
						Its API is very similar to that of QLayout. You can manage widgets and sublayouts inside either QGraphicsLinearLayout and QGraphicsGridLayout. 
						You can also easily write your own layout by subclassing QGraphicsLayout yourself, or add your own QGraphicsItem items to the layout by writing an adaptor subclass of QGraphicsLayoutItem.

			6.6 embedded widget support 
				Graphics View provides seamless support for embedding any widget into the scene. 
				You can embed simple widgets, such as QLineEdit or QPushButton, complex widgets such as QTabWidget, and even complete main windows. 
				To embed your widget to the scene, simply call QGraphicsScene::addWidget(), or create an instance of QGraphicsProxyWidget to embed your widget manually.
				
				You can even embed a new QGraphicsView into your scene to provide complex nested scenes.

	QGraphicsItem 类
		1,QGraphicsItem 的继承结构
		
			QtWidgets.QGraphicsItem
			
			自定义的item 如果想要使用信号和槽,可以多继承QGraphicsItem和QObject,QT也提供了一个QGraphicsObject来供使用
			
			
		2,一句话概括QGraphicsItem
			The QGraphicsItem class is the base class for all graphical items in a QGraphicsScene. 
			
			
			
			

	QGraphicsScene 类
		1,QGraphicsScene 的继承结构

			QtCore.QObject -> QtWidgets.QGraphicsScene

		2,一句话概括QGraphicsScene
			The QGraphicsScene class provides a surface for managing a large number of 2D graphical items.
			The class serves as a container for QGraphicsItems. 

	
	QGraphicsView 类
		1,QGraphicsView 的继承结构

			QtCore.QObject      
								-> QtWidgets.QWidget -> QtWidgets.QFrame -> QtWidgets.QAbstractScrollArea -> QtWidgets.QGraphicsView 
			QtGui.QPaintDevice
			
		2,一句话概括QGraphicsView
			The QGraphicsView class provides a widget for displaying the contents of a QGraphicsScene. 

			
	
	一句话总结: QGraphicsScene是QGraphicsItem的容器,QGraphicsView用于查看QGraphicsScene





